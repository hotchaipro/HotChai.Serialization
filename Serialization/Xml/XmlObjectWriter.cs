#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;

namespace HotChai.Serialization.Xml
{
    public sealed class XmlObjectWriter : ObjectWriter
    {
        private readonly XmlWriter _writer;
        private readonly InspectorStream _stream;

        public XmlObjectWriter(
            Stream stream)
        {
            if (null == stream)
            {
                throw new ArgumentNullException("stream");
            }

            this._stream = new InspectorStream(stream);
            this._writer = XmlWriter.Create(this._stream, new XmlWriterSettings()
            {
                ConformanceLevel = ConformanceLevel.Fragment,
                CheckCharacters = false,
                OmitXmlDeclaration = true,
                NewLineHandling = NewLineHandling.Entitize,
                Encoding = new UTF8Encoding(false),
            });
        }

        public override ISerializationInspector Inspector
        {
            get { return this._stream.Inspector; }

            set { this._stream.Inspector = value; }
        }

        protected override void WriteStartObjectToken()
        {
            this._writer.WriteStartElement(XmlToken.ObjectElement);
        }

        protected override void WriteStartMemberToken(int memberKey)
        {
            this._writer.WriteStartElement(XmlToken.MemberElement);
            this._writer.WriteAttributeString(XmlToken.MemberKeyAttribute, memberKey.ToString(CultureInfo.InvariantCulture));
        }

        protected override void WriteEndMemberToken()
        {
            this._writer.WriteEndElement();
        }

        protected override void WriteEndObjectToken()
        {
            this._writer.WriteEndElement();
        }

        protected override void WriteStartArrayToken()
        {
            this._writer.WriteStartElement(XmlToken.ArrayElement);
        }

        protected override void WriteEndArrayToken()
        {
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveNullValue()
        {
            this._writer.WriteStartElement(XmlToken.NullElement);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(
            bool value)
        {
            if (value)
            {
                WritePrimitiveValue("1");
            }
            else
            {
                WritePrimitiveValue("0");
            }
        }

        protected override void WritePrimitiveValue(int value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(uint value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(long value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(ulong value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value.ToString(CultureInfo.InvariantCulture));
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(float value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(double value)
        {
            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(byte[] value)
        {
            if (null == value)
            {
                WritePrimitiveNullValue();
                return;
            }

            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteBase64(value, 0, value.Length);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(ReadOnlySpan<byte> value)
        {
            if (null == value)
            {
                WritePrimitiveNullValue();
                return;
            }

            this._writer.WriteStartElement(XmlToken.ValueElement);
            // TODO: Efficient Base64 stream encoding directly to writer
            string encodedString = Convert.ToBase64String(value);
            this._writer.WriteString(encodedString);
            this._writer.WriteEndElement();
        }

        protected override void WritePrimitiveValue(string value)
        {
            if (null == value)
            {
                WritePrimitiveNullValue();
                return;
            }

            this._writer.WriteStartElement(XmlToken.ValueElement);
            this._writer.WriteValue(value);
            this._writer.WriteEndElement();
        }

        public override void Flush()
        {
            this._writer.Flush();
        }
    }
}
