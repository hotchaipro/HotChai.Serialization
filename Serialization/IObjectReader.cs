#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;

namespace HotChai.Serialization
{
    /// <summary>
    /// Defines the interface of a reader that deserializes an object.
    /// </summary>
    public interface IObjectReader
    {
        ISerializationInspector Inspector { get; set; }

        /// <summary>
        /// Gets the key of the current object member.
        /// </summary>
        Int32 MemberKey { get; }

        /// <summary>
        /// Reads the start of a serialized object.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the start of a serialized object was read; otherwise,
        /// <c>false</c> if the serialized object is null.
        /// </returns>
        bool ReadStartObject();

        /// <summary>
        /// Moves the reader to the next member of a serialized object.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the reader moved to the next member; otherwise,
        /// <c>false</c> if the last member was reached.
        /// </returns>
        bool MoveToNextMember();

        [Obsolete("Use the MoveToNextMember method.")]
        bool ReadNextMemberKey();

        /// <summary>
        /// Reads the end of a serialized object.
        /// </summary>
        void ReadEndObject();

        /// <summary>
        /// Reads the start of a serialized array.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the start of a serialized array was read; otherwise,
        /// <c>false</c> if the serialized array is null.
        /// </returns>
        bool ReadStartArray();

        /// <summary>
        /// Moves the reader to the next value in a serialized array.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the reader moved to the next array value; otherwise,
        /// <c>false</c> if the end of the array was reached.
        /// </returns>
        bool MoveToNextArrayValue();

        /// <summary>
        /// Reads the end of a serialized object.
        /// </summary>
        void ReadEndArray();

        /// <summary>
        /// Reads the current value as a <c>Boolean</c> type.
        /// </summary>
        /// <returns>The <c>Boolean</c> value.</returns>
        Boolean ReadValueAsBoolean();

        /// <summary>
        /// Reads the current value as an <c>Int32</c> type.
        /// </summary>
        /// <returns>The <c>Int32</c> value.</returns>
        Int32 ReadValueAsInt32();

        /// <summary>
        /// Reads the current value as a <c>UInt32</c> type.
        /// </summary>
        /// <returns>The <c>UInt32</c> value.</returns>
        UInt32 ReadValueAsUInt32();

        /// <summary>
        /// Reads the current value as an <c>Int64</c> type.
        /// </summary>
        /// <returns>The <c>Int64</c> value.</returns>
        Int64 ReadValueAsInt64();

        /// <summary>
        /// Reads the current value as a <c>UInt64</c> type.
        /// </summary>
        /// <returns>The <c>UInt64</c> value.</returns>
        UInt64 ReadValueAsUInt64();

        /// <summary>
        /// Reads the current value as a <c>Single</c> type.
        /// </summary>
        /// <returns>The <c>Single</c> value.</returns>
        Single ReadValueAsSingle();

        /// <summary>
        /// Reads the current value as a <c>Double</c> type.
        /// </summary>
        /// <returns>The <c>Double</c> value.</returns>
        Double ReadValueAsDouble();

        /// <summary>
        /// Reads the current value as an array of <c>Byte</c>.
        /// </summary>
        /// <returns>The array of <c>Byte</c> value.</returns>
        Byte[] ReadValueAsBytes(int byteQuota);

        /// <summary>
        /// Reads the current value as a <c>String</c> type.
        /// </summary>
        /// <returns>The <c>String</c> value.</returns>
        String ReadValueAsString(int byteQuota);
    }
}
