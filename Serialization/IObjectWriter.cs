#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;

namespace HotChai.Serialization
{
    /// <summary>
    /// Defines the interface of a writer that serializes an object.
    /// </summary>
    public interface IObjectWriter
    {
        ISerializationInspector Inspector { get; set; }

        /// <summary>
        /// Writes the start of a serialized object.
        /// </summary>
        void WriteStartObject();

        /// <summary>
        /// Writes the start of a serialized object member with the specified key.
        /// </summary>
        /// <param name="memberKey">The key of the member.</param>
        void WriteStartMember(Int32 memberKey);

        /// <summary>
        /// Writes the end of a serialized object member.
        /// </summary>
        void WriteEndMember();

        /// <summary>
        /// Writes the end of a serialized object.
        /// </summary>
        void WriteEndObject();

        /// <summary>
        /// Writes the start of a serialized array.
        /// </summary>
        void WriteStartArray();

        /// <summary>
        /// Writes the end of a serialized array.
        /// </summary>
        void WriteEndArray();

        /// <summary>
        /// Writes a null serialized value.
        /// </summary>
        void WriteNullValue();

        /// <summary>
        /// Writes a <c>Boolean</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Boolean value);

        /// <summary>
        /// Writes an <c>Int32</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Int32 value);

        /// <summary>
        /// Writes a <c>UInt32</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(UInt32 value);

        /// <summary>
        /// Writes an <c>Int64</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Int64 value);

        /// <summary>
        /// Writes a <c>UInt64</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(UInt64 value);

        /// <summary>
        /// Writes a <c>Single</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Single value);

        /// <summary>
        /// Writes a <c>Double</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Double value);

        /// <summary>
        /// Writes an array of <c>Byte</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(Byte[] value);

#if NET5_0_OR_GREATER
        /// <summary>
        /// Writes a <c>ReadOnlySpan&lt;Byte&gt;</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(ReadOnlySpan<Byte> value);
#endif

        /// <summary>
        /// Writes a <c>String</c> serialized value.
        /// </summary>
        /// <param name="value">The value.</param>
        void WriteValue(String value);

        /// <summary>
        /// Writes any buffered data to the output.
        /// </summary>
        void Flush();
    }
}
