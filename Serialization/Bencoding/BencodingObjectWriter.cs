#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
#nullable enable
using System;
using System.Globalization;
using System.IO;
using System.Text;

namespace HotChai.Serialization.Bencoding
{
    public sealed class BencodingObjectWriter : ObjectWriter
    {
        private readonly InspectorStream _stream;
        private readonly BinaryWriter _writer;

        public BencodingObjectWriter(
            Stream stream)
        {
            if (null == stream)
            {
                throw new ArgumentNullException("stream");
            }

            this._stream = new InspectorStream(stream);
            this._writer = new BinaryWriter(this._stream, Encoding.UTF8);
        }

        public override ISerializationInspector? Inspector
        {
            get
            {
                return this._stream.Inspector;
            }

            set
            {
                this._stream.Inspector = value;
            }
        }

        protected override void WriteStartObjectToken()
        {
            this._writer.Write(BencodingToken.Dictionary);
        }

        protected override void WriteStartMemberToken(
            int memberKey)
        {
            // NOTE: Bencoding specification requires a string type key value
            WritePrimitiveValue(memberKey.ToString(CultureInfo.InvariantCulture));
        }

        protected override void WriteEndMemberToken()
        {
        }

        protected override void WriteEndObjectToken()
        {
            this._writer.Write(BencodingToken.End);
        }

        protected override void WriteStartArrayToken()
        {
            this._writer.Write(BencodingToken.List);
        }

        protected override void WriteEndArrayToken()
        {
            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveNullValue()
        {
            this._writer.Write(BencodingToken.Null);
        }

        protected override void WritePrimitiveValue(
            bool value)
        {
            this._writer.Write(BencodingToken.Integer);

            if (value)
            {
                WriteRaw("1");
            }
            else
            {
                WriteRaw("0");
            }

            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveValue(
            int value)
        {
            this._writer.Write(BencodingToken.Integer);
            WriteRaw(value.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveValue(
            uint value)
        {
            this._writer.Write(BencodingToken.Integer);
            WriteRaw(value.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveValue(
            long value)
        {
            this._writer.Write(BencodingToken.Integer);
            WriteRaw(value.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveValue(
            ulong value)
        {
            this._writer.Write(BencodingToken.Integer);
            WriteRaw(value.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.End);
        }

        protected override void WritePrimitiveValue(
            float value)
        {
            // NOTE: Bencoding does not explicitly support floats,
            // so we encode as a string.
            WritePrimitiveValue(value.ToString("R"));
        }

        protected override void WritePrimitiveValue(
            double value)
        {
            // NOTE: Bencoding does not explicitly support floats,
            // so we encode as a string.
            WritePrimitiveValue(value.ToString("R"));
        }

        protected override void WritePrimitiveValue(
            byte[] value)
        {
            if (value == null)
            {
                WritePrimitiveNullValue();
                return;
            }

            // Length prefix
            WriteRaw(value.Length.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.LengthDelimiter);

            // Byte string
            this._writer.Write(value);
        }

#if NET5_0_OR_GREATER
        protected override void WritePrimitiveValue(
            ReadOnlySpan<byte> value)
        {
            if (value == null)
            {
                WritePrimitiveNullValue();
                return;
            }

            // Length prefix
            WriteRaw(value.Length.ToString(CultureInfo.InvariantCulture));
            this._writer.Write(BencodingToken.LengthDelimiter);

            // Byte string
            this._writer.Write(value);
        }
#endif

        protected override void WritePrimitiveValue(
            string value)
        {
            if (value == null)
            {
                WritePrimitiveNullValue();
                return;
            }

            byte[] bytes = Encoding.UTF8.GetBytes(value);
            WritePrimitiveValue(bytes);
        }

        public override void Flush()
        {
            this._writer.Flush();
        }

        private void WriteRaw(string value)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(value);
            this._writer.Write(bytes);
        }
    }
}
