#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
using System.IO;

namespace HotChai.Serialization
{
    internal sealed class InspectorStream : Stream
    {
        private readonly Stream _innerStream;
        private ISerializationInspector _inspector;
        private readonly byte[] _oneByteBuffer = new byte[1];

        public InspectorStream(
            Stream stream)
        {
            if (null == stream)
            {
                throw new ArgumentNullException("stream");
            }

            this._innerStream = stream;
        }

        public ISerializationInspector Inspector
        {
            get
            {
                return this._inspector;
            }

            set
            {
                this._inspector = value;
            }
        }

        public override bool CanRead
        {
            get { return this._innerStream.CanRead; }
        }

        public override bool CanSeek
        {
            get { return this._innerStream.CanSeek; }
        }

        public override bool CanWrite
        {
            get { return this._innerStream.CanWrite; }
        }

        public override void Flush()
        {
            this._innerStream.Flush();
        }

        public override long Length
        {
            get { return this._innerStream.Length; }
        }

        public override long Position
        {
            get
            {
                return this._innerStream.Position;
            }

            set
            {
                throw new NotSupportedException();
            }
        }

        public override int Read(byte[] buffer, int offset, int count)
        {
            int bytesRead = this._innerStream.Read(buffer, offset, count);
            if (bytesRead > 0)
            {
                this._inspector?.AddContent(buffer, offset, bytesRead);
            }

            return bytesRead;
        }

        public override int ReadByte()
        {
            int bytesRead = this._innerStream.Read(this._oneByteBuffer, 0, 1);
            if (bytesRead == 0)
            {
                return -1;
            }

            this._inspector?.AddContent(this._oneByteBuffer, 0, bytesRead);

            return this._oneByteBuffer[0];
        }

        public override long Seek(long offset, SeekOrigin origin)
        {
            return this._innerStream.Seek(offset, origin);
        }

        public override void SetLength(long value)
        {
            throw new NotSupportedException();
        }

        public override void Write(byte[] buffer, int offset, int count)
        {
            this._innerStream.Write(buffer, offset, count);

            this._inspector?.AddContent(buffer, offset, count);
        }
    }
}
